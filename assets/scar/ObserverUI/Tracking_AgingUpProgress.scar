AgingUpProgress = {}

ObserverUiInitialization:AddInitializable(AgingUpProgress)

function AgingUpProgress:Initialize()
	for i=1, #PLAYERS do
		local player = PLAYERS[i].id
		self:_Initialize(player)
	end
end

function AgingUpProgress:GetForPlayer_IsAgingUp_Progress_EstimatedTimeOfCompletion(player)
	if GameObjectRepository[player.PlayerID].Age > 3 then
		return false, 0.0, nil
	end
	
	local getIsAgingUp = self._GetForNonAbbasidPlayer_IsAgingUp
	local getProgressAndEstimatedTimeOfCompletio = self._GetForNonAbbasidPlayer_Progress_EstimatedTimeOfCompletion
	if Player_GetRace(player) == RACE.ABBASID then
		getIsAgingUp = self._GetForAbbasidPlayer_IsAgingUp
		getProgressAndEstimatedTimeOfCompletio = self._GetForAbbasidPlayer_Progress_EstimatedTimeOfCompletion
	end
	
	local progress, timeOfCompletion = getProgressAndEstimatedTimeOfCompletio(self, player)
	if timeOfCompletion == math.huge then
		timeOfCompletion = nil
	end
	
	return getIsAgingUp(self, player), 1.0 * progress, timeOfCompletion
end

function AgingUpProgress:_GetTrackingIntervalInTicks()
	return 3
end

function AgingUpProgress:_Initialize(player)
	if Player_GetRace(player) == RACE.ABBASID then
			self:_InitializeForAbbasid(player)
		return
	end
	self:_InitializeForNonAbbasid(player)
end

function AgingUpProgress:_InitializeForAbbasid(player)
	local progress = {} 
	self[player.PlayerID] = progress
	
	local rule = function ()
		if GameObjectRepository[player.PlayerID].Age > 3 then
			return
		end
		
		local isAtFirstPositionInProductionQueue = false
		local isWingQueued = false
		local houseOfWisdom = GameObjectRepository[player.PlayerID].HouseOfWisdom
        if houseOfWisdom then
            local queueSize = Entity_GetProductionQueueSize(houseOfWisdom)
            for i = (queueSize - 1), 0, -1 do
                local queueItem = Entity_GetProductionQueueItem(houseOfWisdom, i)
				
				if BP_IsUpgradeOfType(queueItem, "abbasid_wing_upgrade") then
					isWingQueued = true
					if i == 0 then
						isAtFirstPositionInProductionQueue = true
					end
				end
            end
        end
		
		if not isWingQueued then
			progress.IsAgingUp = false
			progress.StartedAt = nil
			return
		end
		
		progress.IsAgingUp = true
		if isAtFirstPositionInProductionQueue and progress.StartedAt == nil then
			progress.StartedAt = World_GetGameTime()
		end
	end
	
	ObserverUiRuleSystem:AddDataProcessingRule(player.PlayerID, rule)
end

function AgingUpProgress:_InitializeForNonAbbasid(player)
	self[player.PlayerID] = {}
	
	local rule = function ()
		if World_GetGameTicks() % self:_GetTrackingIntervalInTicks() ~= 0 
				or GameObjectRepository[player.PlayerID].Age > 3 then
			return
		end
		
		if not GameObjectRepository[player.PlayerID].LandmarkForNextAge then
			self[player.PlayerID] = {}
			return
		end
		
		local progress = self[player.PlayerID]
		local newProgress = {}
		self:_UpdateLandmarkProgress(progress, newProgress, GameObjectRepository[player.PlayerID].LandmarkForNextAge)
		if GameObjectRepository[player.PlayerID].SecondLandmarkForNextAge then
			self:_UpdateLandmarkProgress(progress, newProgress, GameObjectRepository[player.PlayerID].SecondLandmarkForNextAge)
		end
		
		self[player.PlayerID] = newProgress
	end
	
	ObserverUiRuleSystem:AddDataProcessingRule(player.PlayerID, rule)
end

function AgingUpProgress:_UpdateLandmarkProgress(oldProgresses, newProgresses, entity)
	local entityProgress = { OldProgress = 0 }
	if oldProgresses[entity.EntityID] ~= nil then
		entityProgress.OldProgress = oldProgresses[entity.EntityID].Progress
	end
	entityProgress.Progress = Entity_GetBuildingProgress(entity)
	
	local speed = (entityProgress.Progress - entityProgress.OldProgress) * 8 / self:_GetTrackingIntervalInTicks()
	entityProgress.EstimatedTimeOfCompletion = World_GetGameTime() + (1 - entityProgress.Progress) / speed
	
	newProgresses[entity.EntityID] = entityProgress
end

function AgingUpProgress:_GetForNonAbbasidPlayer_IsAgingUp(player)
	return next(self[player.PlayerID]) ~= nil
end

function AgingUpProgress:_GetForNonAbbasidPlayer_Progress_EstimatedTimeOfCompletion(player)
	local progresses = self[player.PlayerID]
	
	local progressIndex, progress = next(progresses)
	if not progressIndex then
		return 0, nil
	end
	
	local progressIndex2, progress2 = next(progresses, progressIndex)
	if progressIndex2 and progress2.EstimatedTimeOfCompletion < progress.EstimatedTimeOfCompletion then
		progress = progress2
	end
	
	return progress.Progress, progress.EstimatedTimeOfCompletion
end

function AgingUpProgress:_GetForAbbasidPlayer_IsAgingUp(player)
	return self[player.PlayerID].IsAgingUp == true
end

function AgingUpProgress:_GetForAbbasidPlayer_Progress_EstimatedTimeOfCompletion(player)
	local progressTable = self[player.PlayerID]
	
	local progress = 0
	local timeOfCompletion
	if progressTable.StartedAt ~= nil then
		progress = (World_GetGameTime() - progressTable.StartedAt) / 120
		timeOfCompletion = progressTable.StartedAt + 120
	end
	
	return progress, timeOfCompletion
end
