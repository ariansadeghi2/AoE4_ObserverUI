_ObserverUIDataContext = {
	players = {}
}

_ResIndex = {
	food = 1,
	wood = 2,
	gold = 3,
	stone = 4
}

_AgeIcons = {
	"icons/races/common/abilities/age_1",
	"icons/races/common/abilities/age_2",
	"icons/races/common/abilities/age_3",
	"icons/races/common/abilities/age_4"
}

function AdaptIconPathForXaml(iconPath)
	return string.format("pack://application:,,,/WPFGUI;component/%s.png", string.gsub(iconPath, "\\", "/" ))
end

_RaceImage = {}
_RaceImage["abbasid"] = AdaptIconPathForXaml("images/civ_flags/flag_abbasid")
_RaceImage["chinese"] = AdaptIconPathForXaml("images/civ_flags/flag_chinese")
_RaceImage["english"] = AdaptIconPathForXaml("images/civ_flags/flag_english")
_RaceImage["french"] = AdaptIconPathForXaml("images/civ_flags/flag_french")
_RaceImage["hre"] = AdaptIconPathForXaml("images/civ_flags/flag_hre")
_RaceImage["mongol"] = AdaptIconPathForXaml("images/civ_flags/flag_mongol")
_RaceImage["rus"] = AdaptIconPathForXaml("images/civ_flags/flag_rus")
_RaceImage["sultanate"] = AdaptIconPathForXaml("images/civ_flags/flag_sultanates")

function InitializeObserverUIDataContext()
	for index, playerTable in pairs(PLAYERS) do
		
		_ObserverUIDataContext.players[index] = {
			name = playerTable.playerName,
			color = UI_GetColourAsString(Player_GetUIColour(playerTable.id)),
			civIcon = AdaptIconPathForXaml(World_GetRaceIcon(playerTable.race)),
			civImage = _RaceImage[Player_GetRaceName(playerTable.id)],
			
			age = "",
			populationVsMaximumPopulation = "",
			workerPopulation = 0,
			idleWorkerPopulation = 0,
			militaryPopulation = 0,
			siegePopulation = 0,
			relics = 0,
			relicsDeposited = 0,
			upgradesQueued = {},
			units = {}
		}
		
		local resources = {}
		resources[_ResIndex.food] = {amount=0, workers=0, income="", icon=AdaptIconPathForXaml("icons/resources/resource_food_icon")}
		resources[_ResIndex.wood] = {amount=0, workers=0, income="", icon=AdaptIconPathForXaml("icons/resources/resource_wood_icon")}
		resources[_ResIndex.gold] = {amount=0, workers=0, income="", icon=AdaptIconPathForXaml("icons/resources/resource_gold_icon")}
		resources[_ResIndex.stone] = {amount=0, workers=0, income="", icon=AdaptIconPathForXaml("icons/resources/resource_stone_icon")}
		
		_ObserverUIDataContext.players[index].resources = resources
	end
	
	_ObserverUIDataContext.player1 = _ObserverUIDataContext.players[1]
	_ObserverUIDataContext.player2 = _ObserverUIDataContext.players[2]
end

function UpdateObserverUIDataContext()
	for index, playerTable in pairs(_ObserverUIDataContext.players) do
		local player = PLAYERS[index].id
		
		playerTable.age = AdaptIconPathForXaml(_AgeIcons[Player_GetCurrentAge(player)])
		
		UpdateResources(playerTable, player)
		
		playerTable.populationVsMaximumPopulation = GetPopulationVsMaximumPopulation(player)
		local populationComposition = GetPopulationComposition(player)
		
		UpdatePopulationComposition(playerTable, player)
		UpdateRelics(playerTable, player)
		UpdateUnitsAndQueuedStuff(playerTable, player, PLAYERS[index].race)
	end
	
	UI_SetDataContext("ObserverUI", _ObserverUIDataContext)
end

function UpdateResources(t, player)
	local resources = Player_GetResources(player)
	
	t.resources[_ResIndex.food].amount = resources.food
	t.resources[_ResIndex.wood].amount = resources.wood
	t.resources[_ResIndex.gold].amount = resources.gold
	t.resources[_ResIndex.stone].amount = resources.stone
	
	t.resources[_ResIndex.food].workers = Player_GetStateModelInt(player, "num_food_gatherers")
	t.resources[_ResIndex.wood].workers = Player_GetStateModelInt(player, "num_wood_gatherers")
	t.resources[_ResIndex.gold].workers = Player_GetStateModelInt(player, "num_gold_gatherers")
	t.resources[_ResIndex.stone].workers = Player_GetStateModelInt(player, "num_stone_gatherers")
	
	t.resources[_ResIndex.food].income = tostring(math.floor(Player_GetResourceRate(player, RT_Food)*60)).."/min"
	t.resources[_ResIndex.wood].income = tostring(math.floor(Player_GetResourceRate(player, RT_Wood)*60)).."/min"
	t.resources[_ResIndex.gold].income = tostring(math.floor(Player_GetResourceRate(player, RT_Gold)*60)).."/min"
	t.resources[_ResIndex.stone].income = tostring(math.floor(Player_GetResourceRate(player, RT_Stone)*60)).."/min"
end

function GetPopulationVsMaximumPopulation(player)
	local maxPop = Player_GetMaxPopulation(player, CT_Personnel)
	local curPop = Player_GetCurrentPopulation(player, CT_Personnel)
	
	return math.floor(curPop) .. "/" .. math.floor(maxPop)
end

function GetPopulationComposition(player)
	local workers = SGroup_CreateUnique()
	local military = SGroup_CreateUnique()
	
	Player_GetAll(player, workers)
	SGroup_Filter(workers, {"worker"}, FILTER_KEEP, military)
	local workerPopulation = SGroup_CountPopulation(workers)
	
	local idleWorkerPopulation = 0
    local countIdleWorkerPopulation = function(sgroup, index, squad)
        if Squad_IsIdle(squad) then
            idleWorkerPopulation = idleWorkerPopulation + Squad_Population(squad, CT_Personnel)
        end
    end
    SGroup_ForEach(workers, countIdleWorkerPopulation)
	
	SGroup_Filter(military, {"military"}, FILTER_KEEP)
	local militaryPopulation = SGroup_CountPopulation(military)
	
	SGroup_Filter(military, {"siege"}, FILTER_KEEP)
	local siegePopulation = SGroup_CountPopulation(military)
	
	SGroup_Destroy(workers)
	SGroup_Destroy(military)
	
	return workerPopulation, idleWorkerPopulation, militaryPopulation, siegePopulation
end

function UpdatePopulationComposition(t, player)
	t.workerPopulation, t.idleWorkerPopulation, t.militaryPopulation, t.siegePopulation
		= GetPopulationComposition(player)
end

function GetRelics(player)
	local relics = 0
	local relicsDeposited = 0
	
    local countRelics = function(egroup, index, entity)
		local tempRelics = Entity_GetStateModelFloat(entity, "Relic_Count")
		
		if Entity_IsBuilding(entity) and not Entity_IsPartOfSquad(entity) then
			relicsDeposited = relicsDeposited + tempRelics
		else
			relics = relics + tempRelics
		end
    end
    local egroup = Player_GetAllEntities(player)
	EGroup_ForEach(egroup, countRelics)
	
	return relics, relicsDeposited
end

function UpdateRelics(t, player)
	t.relics, t.relicsDeposited
		= GetRelics(player)
end

function DismissErrors(default, func)
    local success, result = pcall(func)
    if success then
        return result
    end
    
    return default
end

function GetIconNameFromSquadBlueprintUnsafe(pbg, race)
	return BP_GetSquadUIInfo(pbg, race).iconName
end

function GetIconNameFromSquadBlueprint(pbg, race)
    return DismissErrors(nil, function() return GetIconNameFromSquadBlueprintUnsafe(pbg, race) end)
end

function GetIconNameFromUpgradeBlueprintUnsafe(pbg)
	return BP_GetUpgradeUIInfo(pbg).iconName
end

function GetIconNameFromUpgradeBlueprint(pbg)
    return DismissErrors(nil, function() return GetIconNameFromUpgradeBlueprintUnsafe(pbg) end)
end

function IncreaseCountOfItemInTable(t, item)
    if item ~= nil then
        local count = t[item]
        if count == nil then
            count = 0
        end
        t[item] = count + 1
    end
end

function HasMilitaryIcon(bp, race)
	return BP_GetSquadUIInfo(bp, race).tooltipDataTemplate == "BuildingMilitaryDataTemplate"
end

function GetUnits(player, race)
	Player_GetAll(player)
	
	local units = {}
	local iconIsMilitary = {}
    local countUnitsByIcon = function(sgroup, index, squad)
        local bp = Squad_GetBlueprint(squad)
        local icon = GetIconNameFromSquadBlueprint(bp, race)
		IncreaseCountOfItemInTable(units, icon)
		iconIsMilitary[icon] = HasMilitaryIcon(Squad_GetBlueprint(squad), race)
    end
    SGroup_ForEach(sg_allsquads, countUnitsByIcon)
	
	return units, iconIsMilitary
end

function GetQueuedStuff(player, race)
	local upgradesQueued = {}
	local unitsQueued = {}
	local iconIsMilitary = {}
    local countQueuedStuffByIcon = function(egroup, index, entity)
        if Entity_HasProductionQueue(entity) and Entity_IsBuilding(entity) then
            local queueSize = Entity_GetProductionQueueSize(entity)
            for i = 0, (queueSize - 1) do
                local queueItem = Entity_GetProductionQueueItem(entity, i)
				
				if queueItem.PropertyBagGroupType == PBGTYPE_Upgrade then
                	table.insert(upgradesQueued, GetIconNameFromUpgradeBlueprint(queueItem))
				elseif queueItem.PropertyBagGroupType == PBGTYPE_Squad then
			        local icon = GetIconNameFromSquadBlueprint(queueItem, race)
			        IncreaseCountOfItemInTable(unitsQueued, icon)
					iconIsMilitary[icon] = HasMilitaryIcon(queueItem, race)
				end
            end
        end
    end
	local buildings = Player_GetAllEntities(player);
	EGroup_Filter(buildings, {"building"}, FILTER_KEEP)
    EGroup_ForEach(buildings, countQueuedStuffByIcon)
		
	return unitsQueued, upgradesQueued, iconIsMilitary
end

function UpdateUnitsAndQueuedStuff(t, player, race)
	local units, iconIsMilitary = GetUnits(player, race)
	local unitsQueued, upgradesQueued, iconIsMilitaryTemp = GetQueuedStuff(player, race)
	
	for k,v in pairs(iconIsMilitaryTemp) do iconIsMilitary[k] = v end

	function GetQueuedUnitsCount(icon)
		local count = unitsQueued[icon]
		if count then
			unitsQueued[icon] = nil
			return count
		end
		return 0
	end
	
	local unitsUi = {}
	for icon, count in pairs(units) do
		table.insert(unitsUi, {
				icon = AdaptIconPathForXaml(icon), 
				count = count, 
				queued = GetQueuedUnitsCount(icon),
				isMilitary = iconIsMilitary[icon]})
	end
	for icon, count in pairs(unitsQueued) do
		table.insert(unitsUi, {
				icon = AdaptIconPathForXaml(icon), 
				count = 0, 
				queued = count,
				isMilitary = iconIsMilitary[icon]})
	end
	
	local upgradesQueuedUi = {}
	for index, icon in pairs(upgradesQueued) do
		table.insert(upgradesQueuedUi, {icon = AdaptIconPathForXaml(icon)})
	end
	
	t.upgradesQueued = upgradesQueuedUi
	t.units = unitsUi
end


