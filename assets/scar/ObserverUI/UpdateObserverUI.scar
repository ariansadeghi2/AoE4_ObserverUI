import("core.scar")

_ObserverUIDataContext = {
	players = {}
}

_ResIndex = {
	food = 1,
	wood = 2,
	gold = 3,
	stone = 4
}

_AgeIcons = {
	"icons/races/common/abilities/age_1",
	"icons/races/common/abilities/age_2",
	"icons/races/common/abilities/age_3",
	"icons/races/common/abilities/age_4"
}

function AdaptIconPathForXaml(iconPath)
	return string.format("pack://application:,,,/WPFGUI;component/%s.png", string.gsub(iconPath, "\\", "/" ))
end

function InitializeObserverUIDataContext()
	for index, playerTable in pairs(PLAYERS) do
		
		_ObserverUIDataContext.players[index] = {
			name = playerTable.playerName,
			color = UI_GetColourAsString(Player_GetUIColour(playerTable.id)),
			civIcon = AdaptIconPathForXaml(World_GetRaceIcon(playerTable.race)),
			
			age = "",
			populationVsMaximumPopulation = "",
			workerPopulation = 0,
			idleWorkerPopulation = 0,
			militaryPopulation = 0,
			siegePopulation = 0,
			relics = 0,
			relicsDeposited = 0
		}
		
		local resources = {}
		resources[_ResIndex.food] = {amount=0, workers=0, icon=AdaptIconPathForXaml("icons/resources/resource_food_icon")}
		resources[_ResIndex.wood] = {amount=0, workers=0, icon=AdaptIconPathForXaml("icons/resources/resource_wood_icon")}
		resources[_ResIndex.gold] = {amount=0, workers=0, icon=AdaptIconPathForXaml("icons/resources/resource_gold_icon")}
		resources[_ResIndex.stone] = {amount=0, workers=0, icon=AdaptIconPathForXaml("icons/resources/resource_stone_icon")}
		
		_ObserverUIDataContext.players[index].resources = resources
	end
end

function UpdateObserverUIDataContext()
	for index, playerTable in pairs(_ObserverUIDataContext.players) do
		local player = PLAYERS[index].id
		
		playerTable.age = AdaptIconPathForXaml(_AgeIcons[Player_GetCurrentAge(player)])
		
		UpdateResources(playerTable, player)
		
		playerTable.populationVsMaximumPopulation = GetPopulationVsMaximumPopulation(player)
		local populationComposition = GetPopulationComposition(player)
		
		UpdatePopulationComposition(playerTable, player)
		UpdateRelics(playerTable, player)
	end
	
	UI_SetDataContext("ObserveNPlayers", _ObserverUIDataContext)
end

function UpdateResources(t, player)
	local resources = Player_GetResources(player)
	
	t.resources[_ResIndex.food].amount = resources.food
	t.resources[_ResIndex.wood].amount = resources.wood
	t.resources[_ResIndex.gold].amount = resources.gold
	t.resources[_ResIndex.stone].amount = resources.stone
	
	t.resources[_ResIndex.food].workers = Player_GetStateModelInt(player, "num_food_gatherers")
	t.resources[_ResIndex.wood].workers = Player_GetStateModelInt(player, "num_wood_gatherers")
	t.resources[_ResIndex.gold].workers = Player_GetStateModelInt(player, "num_gold_gatherers")
	t.resources[_ResIndex.stone].workers = Player_GetStateModelInt(player, "num_stone_gatherers")
end

function GetPopulationVsMaximumPopulation(player)
	local maxPop = Player_GetMaxPopulation(player, CT_Personnel)
	local curPop = Player_GetCurrentPopulation(player, CT_Personnel)
	
	return math.floor(curPop) .. "/" .. math.floor(maxPop)
end

function GetPopulationComposition(player)
	local workers = SGroup_CreateUnique()
	local military = SGroup_CreateUnique()
	
	Player_GetAll(player, workers)
	SGroup_Filter(workers, {"worker"}, FILTER_KEEP, military)
	local workerPopulation = SGroup_CountPopulation(workers)
	
	local idleWorkerPopulation = 0
    local countIdleWorkerPopulation = function(sgroup, index, squad)
        if Squad_IsIdle(squad) then
            idleWorkerPopulation = idleWorkerPopulation + Squad_Population(squad, CT_Personnel)
        end
    end
    SGroup_ForEach(workers, countIdleWorkerPopulation)
	
	SGroup_Filter(military, {"military"}, FILTER_KEEP)
	local militaryPopulation = SGroup_CountPopulation(military)
	
	SGroup_Filter(military, {"siege"}, FILTER_KEEP)
	local siegePopulation = SGroup_CountPopulation(military)
	
	SGroup_Destroy(workers)
	SGroup_Destroy(military)
	
	return workerPopulation, idleWorkerPopulation, militaryPopulation, siegePopulation
end

function UpdatePopulationComposition(t, player)
	t.workerPopulation, t.idleWorkerPopulation, t.militaryPopulation, t.siegePopulation
		= GetPopulationComposition(player)
end

function GetRelics(player)
	local relics = 0
	local relicsDeposited = 0
	
    local countRelics = function(egroup, index, entity)
		local tempRelics = Entity_GetStateModelFloat(entity, "Relic_Count")
		relics = relics + tempRelics
		
		if Entity_IsBuilding(entity) and not Entity_IsPartOfSquad(entity) then
			relicsDeposited = relicsDeposited + tempRelics
		end
    end
    local egroup = Player_GetAllEntities(player)
	EGroup_ForEach(egroup, countRelics)
	
	return relics, relicsDeposited
end

function UpdateRelics(t, player)
	t.relics, t.relicsDeposited
		= GetRelics(player)
end
	
