UiVictoryCountdowns = {}

ObserverUiInitialization:AddInitializable(UiVictoryCountdowns)

function UiVictoryCountdowns:Initialize()
	local teamSummariesByIndex = ObserverUIDataContextMappings.TeamSummariesByIndex
	for t=1, #teamSummariesByIndex do
		teamSummariesByIndex[t].VictoryCountdownsContext = {}
	end
	
	local teams = TEAMS
	local timer_Exists = Timer_Exists
	local timer_GetRemaining = Timer_GetRemaining
	local tableInsert = table.insert
	local rule = function()
		
		for t=1, #teamSummariesByIndex do
			teamSummariesByIndex[t].VictoryCountdownsContext = {}
			
			for p=1, #teams[t].players do
				local wonder = teams[t].players[p]._wonder
				if wonder and timer_Exists(wonder.timer_victory_deterministic) then
					local victoryCountdown = { 
						TimeRemaining = timer_GetRemaining(wonder.timer_victory_deterministic),
						Icon = "pack://application:,,,/WPFGUI;component/icons/races/common/victory_conditions/victory_condition_wonder.png",
						ClosestTo0 = false
					}
					tableInsert(teamSummariesByIndex[t].VictoryCountdownsContext, victoryCountdown)
				end
			end
		end
		
	    if _religious and timer_Exists(_religious.timer_victory) then
			local victoryCountdown = { 
				TimeRemaining = timer_GetRemaining(_religious.timer_victory),
				Icon = "pack://application:,,,/WPFGUI;component/icons/races/common/victory_conditions/victory_condition_religious.png",
				ClosestTo0 = false
			}
			
			for t=1, #teamSummariesByIndex do
				for p=1, #teams[t].players do
					if _religious.last_capturer == teams[t].players[p].id then
						tableInsert(teamSummariesByIndex[t].VictoryCountdownsContext, victoryCountdown)
						break
					end
				end
			end
	    end
		
		local leastTimeRemaining = nil
		local criticalVictoryCountdown = nil
		for t=1, #teamSummariesByIndex do
			local victoryCountdownsContext = teamSummariesByIndex[t].VictoryCountdownsContext
			for i=1, #victoryCountdownsContext do
				local victoryCountdown = victoryCountdownsContext[i]
				if not leastTimeRemaining or victoryCountdown.TimeRemaining < leastTimeRemaining then
					leastTimeRemaining = victoryCountdown.TimeRemaining
					criticalVictoryCountdown = victoryCountdown
				end
			end
		end
		if criticalVictoryCountdown then
			criticalVictoryCountdown.ClosestTo0 = true
		end
	end
	
	ObserverUiRuleSystem:AddUpdateUiDataContextRule(rule)
end
